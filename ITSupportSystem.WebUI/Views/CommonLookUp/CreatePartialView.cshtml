@model ITSupportSystem.Core1.ViewModel.CommonLookUpViewModel

<div class="modal fade" id="addmodal">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="close">
                    <span aria-hidden="true">&times;</span>
                </button>
                <h2 class="modal-title" id="CommonLookUpModalLabel" style="text-align:center;">CREATE</h2>

                <div class="modal-body">

                    <form id="commonLookUpForm" name="CreateForm">

                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                        <div class="form-group">
                            @Html.LabelFor(model => model.ConfigName, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.ConfigName, new { htmlAttributes = new { @class = "form-control", @id = "configname", onkeyup = "createvalidate()" } })
                                <span id="confignameerror" style="color:darkred"></span>
                            </div>
                        </div>
                        <br /><br /><br />

                        <div class="form-group">
                            @Html.LabelFor(model => model.ConfigKey, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.ConfigKey, new { htmlAttributes = new { @class = "form-control", @id = "configkey", onkeyup = "createvalidate()" } })
                                <span id="configkeyerror" style="color:darkred"></span>
                            </div>
                        </div>
                        <br /><br />
                        <div class="form-group">
                            @Html.LabelFor(model => model.ConfigValue, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.ConfigValue, new { htmlAttributes = new { @class = "form-control", @id = "configvalue", onkeyup = "createvalidate()" } })
                                <span id="configvalueerror" style="color:darkred"></span>
                            </div>
                        </div>
                        <br /><br />
                        <div class="form-group">
                            @Html.LabelFor(model => model.DisplayOrder, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.DisplayOrder, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.DisplayOrder, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <br /><br />
                        <div class="form-group">
                            @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <br /><br />

                        <div class="form-group">
                            <label>IsActive :  </label>
                            <input type="checkbox" checked data-toggle="toggle" data-size="small" data-onstyle="success" data-offstyle="danger">
                        </div>

                    </form>
                    <div class="modal-footer" style="text-align:center">
                        <button type="button" id="saveButton" class="btn btn-primary" onclick="createpost()">Create</button>
                        <button type="button" class="btn btn-danger" data-dismiss="modal">Close</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>



@*<link href="https://gitcdn.github.io/bootstrap-toggle/2.2.2/css/bootstrap-toggle.min.css" rel="stylesheet">
    <script src="https://gitcdn.github.io/bootstrap-toggle/2.2.2/js/bootstrap-toggle.min.js"></script>*@

<link href="~/Content/bootstrap.min.css" rel="stylesheet" />


@Styles.Render("~/Content/demo.css")
<script>
    var IsCheck = false;
    function createpost() {
        IsCheck = true;
        var form = $('form[name="CreateForm"]');
        var configname = $('#configname').val();
        var configkey = $('#configkey').val();
        var configvalue = $('#configvalue').val();
        var data = form.serialize();

        if (configname != '' && configkey != '' && configvalue != '') {
            $.post("/CommonLookUp/Create", data, function (data) {
                if (data == 'False') {
                    alert('CommonLookup is already exist');
                }
                else {

                    $('#addmodal').modal('hide');
                    $.ajax({
                        type: 'GET',
                        url: "/CommonLookUp/Index",
                        success: function () {
                 
                        }
                    }).done(function (partialViewResult) {
                        $("#CommonLookupTable").html(partialViewResult);
                        $('.modal-backdrop').remove();
                    });
                    //location.reload();
                }
            })
        }
        else {
            createvalidate();
        }
    }
    function createvalidate() {
        if (IsCheck) {
            var configname = $('#configname').val();
            var configkey = $('#configkey').val();
            var configvalue = $('#configvalue').val();
            if (configname == '') {
                $('#confignameerror').text("Config Name is required");
            }
            else {
                $('#confignameerror').text("");
            }
            if (configkey == '') {
                $('#configkeyerror').text("Config Key is required");
            }
            else {
                $('#configkeyerror').text("");
            }
            if (configvalue == '') {
                $('#configvalueerror').text("Config Value is required");
            }
            else {
                $('#configvalueerror').text("");
            }
        }
    }
</script>




